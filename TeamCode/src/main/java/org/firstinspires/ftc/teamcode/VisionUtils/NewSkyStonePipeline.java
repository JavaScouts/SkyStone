package org.firstinspires.ftc.teamcode.VisionUtils;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.*;
import org.opencv.imgproc.*;
import org.openftc.easyopencv.OpenCvPipeline;

/**
* NewSkyStonePipeline class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class NewSkyStonePipeline extends OpenCvPipeline {

	//Outputs
	private Point newPoint0Output = new Point();
	private Point newPoint1Output = new Point();
	private Mat cvRectangleOutput = new Mat();
	private Mat hsvThresholdOutput = new Mat();
	private Mat drawnOutput = new Mat();
	private Mat blurOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> convexHullsOutput = new ArrayList<MatOfPoint>();
	private int view_source = 0;
	public NewSkyStonePipeline() {

	}

	public int getView_source() {
		return view_source;
	}

	public void setView_source(int view_source) {
		this.view_source = view_source;
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	@Override
	public Mat processFrame(Mat source0) {

		findContoursOutput.clear();
		filterContoursOutput.clear();
		convexHullsOutput.clear();
		// Step New_Point0:
		double newPoint0X = -100.0;
		double newPoint0Y = 60.0;
		newPoint(newPoint0X, newPoint0Y, newPoint0Output);

		// Step New_Point1:
		double newPoint1X = 740.0;
		double newPoint1Y = 400.0;
		newPoint(newPoint1X, newPoint1Y, newPoint1Output);

		// Step CV_rectangle0:
		Mat cvRectangleSrc = source0;
		Point cvRectanglePt1 = newPoint0Output;
		Point cvRectanglePt2 = newPoint1Output;
		Scalar cvRectangleColor = new Scalar(0.0, 0.0, 0.0, 0.0);
		double cvRectangleThickness = 280.0;
		int cvRectangleLinetype = Core.FILLED;
		double cvRectangleShift = 0.0;
		cvRectangle(cvRectangleSrc, cvRectanglePt1, cvRectanglePt2, cvRectangleColor, cvRectangleThickness, cvRectangleLinetype, cvRectangleShift, cvRectangleOutput);

		newPoint0X = 20.0;
		newPoint0Y = -50.0;
		newPoint(newPoint0X, newPoint0Y, newPoint0Output);

		newPoint1X = 570.0;
		newPoint1Y = 500.0;
		newPoint(newPoint1X, newPoint1Y, newPoint1Output);

		// Step CV_rectangle1:
		cvRectangleSrc = cvRectangleOutput;
		cvRectanglePt1 = newPoint0Output;
		cvRectanglePt2 = newPoint1Output;
		cvRectangle(cvRectangleSrc, cvRectanglePt1, cvRectanglePt2, cvRectangleColor, 200.0, cvRectangleLinetype, cvRectangleShift, cvRectangleOutput);

		// Step Blur0:
		Mat blurInput = cvRectangleOutput;
		BlurType blurType = BlurType.get("Box Blur");
		double blurRadius = 6;
		blur(blurInput, blurType, blurRadius, blurOutput);

		// Step HSV_Threshold0:
		Mat hsvThresholdInput = blurOutput;
		double[] hsvThresholdHue = {104.0, 180.0};
		double[] hsvThresholdSaturation = {0.0, 255.0};
		double[] hsvThresholdValue = {1.0, 220.0};
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Find_Contours0:
		Mat findContoursInput = hsvThresholdOutput;
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
		double filterContoursMinArea = 0;
		double filterContoursMinPerimeter = 0;
		double filterContoursMinWidth = 50;
		double filterContoursMaxWidth = 1000;
		double filterContoursMinHeight = 0;
		double filterContoursMaxHeight = 1000;
		double[] filterContoursSolidity = {0, 100};
		double filterContoursMaxVertices = 1000000;
		double filterContoursMinVertices = 0;
		double filterContoursMinRatio = 0;
		double filterContoursMaxRatio = 1000;
		filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);

		// Step Convex_Hulls0:
		ArrayList<MatOfPoint> convexHullsContours = filterContoursOutput;
		convexHulls(convexHullsContours, convexHullsOutput);
		switch (view_source) {

			case 1:
				return cvRectangleOutput;
			case 2:
				return hsvThresholdOutput;
			case 3:
				try {
					ArrayList<MatOfPoint> contours = convexHullsOutput;
					MatOfPoint2f[] contoursPoly = new MatOfPoint2f[contours.size()];
					drawnOutput = cvRectangleOutput;
					try {
						for (int i = 0; i < contours.size(); i++) {
							contoursPoly[i] = new MatOfPoint2f();
							Imgproc.approxPolyDP(new MatOfPoint2f(contours.get(i).toArray()), contoursPoly[i], 3, true);
							Rect r = Imgproc.boundingRect(new MatOfPoint(contoursPoly[i].toArray()));
							cvRectangle(drawnOutput, r.tl(), r.br(), new Scalar(255.0, 0.0, 0.0, 0.0), 8, cvRectangleLinetype, cvRectangleShift, drawnOutput);
						}
						return drawnOutput;
					} catch (IndexOutOfBoundsException e) {
						e.printStackTrace();
					}
				} catch (ArrayIndexOutOfBoundsException e) {
					e.printStackTrace();
				}
				return source0;
			default:
				return source0;

		}
	}

	/**
	 * This method is a generated getter for the output of a New_Point.
	 * @return Point output from New_Point.
	 */
	public Point newPoint0Output() {
		return newPoint0Output;
	}

	/**
	 * This method is a generated getter for the output of a New_Point.
	 * @return Point output from New_Point.
	 */
	public Point newPoint1Output() {
		return newPoint1Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_rectangle.
	 * @return Mat output from CV_rectangle.
	 */
	public Mat cvRectangleOutput() {
		return cvRectangleOutput;
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Convex_Hulls.
	 * @return ArrayList<MatOfPoint> output from Convex_Hulls.
	 */
	public ArrayList<MatOfPoint> convexHullsOutput() {
		return convexHullsOutput;
	}

	enum BlurType{
		BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
		BILATERAL("Bilateral Filter");

		private final String label;

		BlurType(String label) {
			this.label = label;
		}

		public static BlurType get(String type) {
			if (BILATERAL.label.equals(type)) {
				return BILATERAL;
			}
			else if (GAUSSIAN.label.equals(type)) {
				return GAUSSIAN;
			}
			else if (MEDIAN.label.equals(type)) {
				return MEDIAN;
			}
			else {
				return BOX;
			}
		}

		@Override
		public String toString() {
			return this.label;
		}
	}

	/**
	 * Softens an image using one of several filters.
	 * @param input The image on which to perform the blur.
	 * @param type The blurType to perform.
	 * @param doubleRadius The radius for the blur.
	 * @param output The image in which to store the output.
	 */
	private void blur(Mat input, BlurType type, double doubleRadius,
					  Mat output) {
		int radius = (int)(doubleRadius + 0.5);
		int kernelSize;
		switch(type){
			case BOX:
				kernelSize = 2 * radius + 1;
				Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
				break;
			case GAUSSIAN:
				kernelSize = 6 * radius + 1;
				Imgproc.GaussianBlur(input,output, new Size(kernelSize, kernelSize), radius);
				break;
			case MEDIAN:
				kernelSize = 2 * radius + 1;
				Imgproc.medianBlur(input, output, kernelSize);
				break;
			case BILATERAL:
				Imgproc.bilateralFilter(input, output, -1, radius, radius);
				break;
		}
	}

	/**
	 * Fills a point with given x and y values.
	 * @param x the x value to put in the point
	 * @param y the y value to put in the point
	 * @param point the point to fill
	 */
	private void newPoint(double x, double y, Point point) {
		point.x = x;
		point.y = y;
	}

	/**
	 * Draws a rectangle on an image.
	 * @param src Image to draw rectangle on.
	 * @param pt1 one corner of the rectangle.
	 * @param pt2 opposite corner of the rectangle.
	 * @param color Scalar indicating color to make the rectangle.
	 * @param thickness Thickness of the lines of the rectangle.
	 * @param lineType Type of line for the rectangle.
	 * @param shift Number of decimal places in the points.
	 * @param dst output image.
	 */
	private void cvRectangle(Mat src, Point pt1, Point pt2, Scalar color,
		double thickness, int lineType, double shift, Mat dst) {
		src.copyTo(dst);
		if (color == null) {
			color = Scalar.all(1.0);
		}
		Imgproc.rectangle(dst, pt1, pt2, color, (int)thickness, lineType, (int)shift);
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param lum The min and max lum
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] lum,
	    Mat out) {
		Imgproc.cvtColor(input,
				out, Imgproc.COLOR_RGB2HLS);
		Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]),
				new Scalar(hue[1], lum[1], sat[1]), out);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
	 * @param input The image on which to perform the Distance Transform.
	 */
	private void findContours(Mat input, boolean externalOnly,
		List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		}
		else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}


	/**
	 * Filters out contours that do not meet certain criteria.
	 * @param inputContours is the input list of contours
	 * @param output is the the output list of contours
	 * @param minArea is the minimum area of a contour that will be kept
	 * @param minPerimeter is the minimum perimeter of a contour that will be kept
	 * @param minWidth minimum width of a contour
	 * @param maxWidth maximum width
	 * @param minHeight minimum height
	 * @param maxHeight maximimum height
	 * @param minVertexCount minimum vertex Count of the contours
	 * @param maxVertexCount maximum vertex Count
	 * @param minRatio minimum ratio of width to height
	 * @param maxRatio maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea,
		double minPerimeter, double minWidth, double maxWidth, double minHeight, double
		maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double
		minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		//operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth) continue;
			if (bb.height < minHeight || bb.height > maxHeight) continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea) continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int)hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1]) continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)	continue;
			final double ratio = bb.width / (double)bb.height;
			if (ratio < minRatio || ratio > maxRatio) continue;
			output.add(contour);
		}
	}

	/**
	 * Compute the convex hulls of contours.
	 * @param inputContours The contours on which to perform the operation.
	 * @param outputContours The contours where the output will be stored.
	 */
	private void convexHulls(List<MatOfPoint> inputContours,
		ArrayList<MatOfPoint> outputContours) {
		final MatOfInt hull = new MatOfInt();
		outputContours.clear();
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final MatOfPoint mopHull = new MatOfPoint();
			Imgproc.convexHull(contour, hull);
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] {contour.get(index, 0)[0], contour.get(index, 0)[1]};
				mopHull.put(j, 0, point);
			}
			outputContours.add(mopHull);
		}
	}




}

